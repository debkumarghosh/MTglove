using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using UnityEngine;

public class ESP32Receiver : MonoBehaviour
{
    private TcpListener tcpListener;
    private Thread tcpListenerThread;
    public int port = 8080;  // Ensure this matches the ESP32 port

    private void Start()
    {
        // Start the TCP listener on a separate thread
        tcpListenerThread = new Thread(ListenForIncomingConnections);
        tcpListenerThread.IsBackground = true;
        tcpListenerThread.Start();
    }

    private void ListenForIncomingConnections()
    {
        try
        {
            // Create a TCP listener and start it
            tcpListener = new TcpListener(IPAddress.Any, port);
            tcpListener.Start();
            Debug.Log("Server is listening on port " + port);

            // Accept incoming connections in a loop
            while (true)
            {
                using (TcpClient client = tcpListener.AcceptTcpClient())
                using (NetworkStream stream = client.GetStream())
                {
                    Debug.Log("Connected to ESP32");

                    // Buffer for incoming data
                    byte[] buffer = new byte[1024];
                    int bytesRead;

                    // Read incoming data until client disconnects
                    while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
                    {
                        // Convert received data to string
                        string receivedMessage = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                        Debug.Log("Received from ESP32: " + receivedMessage);

                        // Process data (e.g., move a cube, perform other actions)
                        ProcessReceivedData(receivedMessage);
                    }
                }
            }
        }
        catch (SocketException e)
        {
            Debug.LogError("SocketException: " + e);
        }
        finally
        {
            tcpListener.Stop();
        }
    }

    private void ProcessReceivedData(string data)
    {
        // Example: Parse the data and use it to move an object
        // This method can be adapted based on your requirements
        // Debug.Log("Processing data: " + data);
    }

    private void OnApplicationQuit()
    {
        // Stop the listener thread when the application is closed
        tcpListener?.Stop();
        tcpListenerThread?.Abort();
    }
}

